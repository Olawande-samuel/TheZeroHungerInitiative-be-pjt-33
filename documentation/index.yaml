openapi: 3.0.0
info:
  title: Zero Hunger Initiatives
  description: Zero Hunger Initiatives API documentation
  version: 0.0.1
servers:
  - url: https://zero-hunger-initiative.herokuapp.com/api/v1
    description: This is the production main server with the base url
  - url: http://localhost:5000/api/v1
    description: This is also the development server

# Authentication and useful response
components:
  securitySchemes:
    bearerAuth: 
      type: http
      scheme: bearer
      bearerFormat: JWT 
 
  responses:
    AuthTokens:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/Token'
    NotFound:
      description: This resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
            
    BadRequest:
      # Describing the status code
      description: Invalid response
      # response content
      content:
          # Sending a json content
          application/json:
            # schema for the content
            schema: 
              $ref: '#/components/schemas/Error'
              
    InternalServerError:
      # Describing the status code
      description: Invalid server error
      # response content
      content:
          # Sending a json content
          application/json:
            # schema for the content
            schema: 
              $ref: '#/components/schemas/Error'
              
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    # Schema for error response body
    Error:
      type: object
      # since it's an object it has to have property
      properties:
        # name of the field
        status:
          # datatype of the field
          type: string
        # name of the field
        message: 
          # datatype of the field
          type: string
      example:
        status: "error"
        message: "An error occurred"
    EmailSent:
      type: object
      properties:
        status: 
          type: string
        message:
          type: string
      example:
        status: "success"
        message: "email sent"
    SignupResponse:
      type: object
      properties:
        status: 
          type: string
        user:
          type: object
          properties:
            _id:
              type: string
            username: 
              type: string
            phoneNumber:
              type: number
            email:
              type: string
            badge:
              type: number
        token:
          type: string
      example:
        status: "success"
        user:
          _id: "538fsa267fywi787f3678"
          username: "test1"
          phoneNumber: 09020119024
          email: "tohebayomide11@gmail.com"
          badge: 1
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
    LoginResponse:
      type: object
      properties:
        status: 
          type: string
        token:
          type: string
      example:
        status: "success"
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg"
    GetAllUsers:
      type: object
      properties:
        status:
          type: string
          example: "success"
        users:
          type: array
          items: 
            $ref: "#/components/schemas/UserOnly"
    DonationResponse:
      type: object
      properties:
        foodCategory:
          type: string
          example: "raw food"
        deliveryOption:
          type: string
          example: "pick-up"
        items:
          type: array
          items: 
            $ref: "#/components/schemas/DonationOnly"
        user:
          type: string
          example: "userid"
        pickupDate:
          type: string
          example: "2021-06-24"
        pickupAddress:
          type: string
          example: "ondo"
        contactName:
          type: string
          example: "Toheeb"
        contactPhoneNumber:
          type: number
          example: "09020119024"
        localGovernment:
          type: string
          example: "ondo"
        attachedDispatchRider:
          type: boolean
          example: false
        rider:
          type: string
          example: "riderid"
        
    DonationOnly:
      type: object
      properties:
        description:
          type: string
        metric:
          type: string
        quantity:
          type: string
      example:
        description: "indomitable"
        metric: "kg"
        quantity: "12"
    
    UserOnly: 
      # this enclosing is an object
      type: object
      # Onece we have object, it has to have properties
      properties:
        # The name of the field
        _id:
          # type of the datatype
          type: string
        # The name of the field
        username:
          # type of the datatype
          type: string
        phoneNumber:
          type: string
        email:
          type: string
        badge:
          type: string
      example:
        _id: "538fsa267fywi787f3678"
        username: "test1"
        phoneNumber: "09020119024"
        email: "tohebayomide11@gmail.com"
        badge: 1
        
    User: 
      # this enclosing is an object
      type: object
      # Onece we have object, it has to have properties
      properties:
        # The name of the field been returned
        status:
          # type of the datatype
          type: string
        # The name of the field been returned
        user:
          # Type of the datatype
          type: object
        # Since the type is an object, it has to have properties
          properties:
            # The name of the field
            _id:
              # type of the datatype
              type: string
            # The name of the field
            username:
              # type of the datatype
              type: string
            phoneNumber:
              type: string
            email:
              type: string
            badge:
              type: string
      example:
        status: "success"
        user:
          _id: "538fsa267fywi787f3678"
          username: "test1"
          phoneNumber: "09020119024"
          email: "tohebayomide11@gmail.com"
          badge: 1

paths:
  # First the routes
  /users/login:
    # Followed by the http method
    post:
      # Summary of this route
      summary: login into your account.
      # Description of the routes
      description: After user has created an account they can logged into the application and have access to some protected routes.
      # Parameters needed, in the case the parameters will be supply in form of query
      requestBody:
        description: Provide your username and password to login
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              username: 
                type: string
              password:
                type: string
            example:
              username: "test1"
              password: "pass1234"
      # Response
      responses:
        '200': # status code
          # response description
          description: User details and token
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                $ref: '#/components/schemas/LoginResponse'
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "404": # bad request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users/signup:
    # Followed by the http method
    post:
      # Summary of this route
      summary: Create a new account.
      # Description of the routes
      description: Create a new account to get access to some protected routes in the application.
      # Parameters needed, in the case the parameters will be supply in form of query
      requestBody:
        description: Provide all the required fields to create an account
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              username: 
                type: string
              email:
                type: string
              phoneNumber:
                type: number
              password:
                type: string
              passwordConfirm:
                type: string
            example:
              username: "test"
              email: "fayomide11@gmail.com"
              phoneNumber: "09020119024"
              password: "pass1234"
              passwordConfirm: "pass1234"
      # Response
      responses:
        '200': # status code
          # response description
          description: User details and token
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                $ref: '#/components/schemas/SignupResponse'
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "404": # bad request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users/forgot-password:
    # Followed by the http method
    post:
      # Summary of this route
      summary: Forget password.
      # Description of the routes
      description: Forgot your password, okay don't freak out we get you covered, provide your email you use to create an account on this platform.
      # Parameters needed, in the case the parameters will be supply in form of query
      requestBody:
        description: Provide your registered email, we then send a link to your email account, click the link to reset your password.
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              email:
                type: string
            example:
              email: "fayomide11@gmail.com"
      # Response
      responses:
        '200': # status code
          # response description
          description: success response
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                $ref: '#/components/schemas/EmailSent'
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "404": # bad request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users/reset-password/{resetToken}:
    # Followed by the http method
    post:
      # Summary of this route
      summary: Reset password.
      # Description of the routes
      description: Reset your password by clicking on the link send to your email address.
      # Parameters needed, in the case the parameters will be supply in form of query
      parameters:
        - in: path
          name: resetToken
          required: true
          description: reset token 
          schema: 
            type: string
            example: "800e28ede8995d63d73f7ccf33482fea14e2939fd556ba68fae5f281e332f474"
      requestBody:
        description: Provide your new password and passwordConfirm
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              password:
                type: string
              passwordConfirm:
                type: string
            example:
              password: "pass12345"
              passwordConfirm: "pass12345"
      # Response
      responses:
        '200': # status code
          # response description
          description: User details and token
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                $ref: '#/components/schemas/LoginResponse'
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "404": # bad request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users/update-password:
    # Followed by the http method
    post:
      # Summary of this route
      summary: update password.
      # Description of the routes
      description: Logged user can update their current password if they wish to do so.
      security:
        - bearerAuth: [] 
      # Parameters needed, in the case the parameters will be supply in form of query
      requestBody:
        description: Provide your current password, new password and passwordConfirm
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              currentPassword:
                type: string
              password:
                type: string
              passwordConfirm:
                type: string
            example:
              currentPassword: "pass1234"
              password: "pass12345"
              passwordConfirm: "pass12345"
      # Response
      responses:
        '200': # status code
          # response description
          description: User details and token
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                $ref: '#/components/schemas/LoginResponse'
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "404": # bad request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users:
    get:
      summary: Get all users.
      description: Only logged in admin can use this endpoint, to get all the users we have in the database.
      security:
        - bearerAuth: [] 
      responses:
        '200':
          description: User details and token
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/GetAllUsers'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      summary: Get a users.
      description: Only logged in admin can use this endpoint, to get a single users, by providing the id of that user.
      security:
        - bearerAuth: [] 
      parameters:
        - in: path
          name: id
          required: true
          description: user id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a users.
      description: Only logged in admin can use this endpoint, to update the user details
      security:
        - bearerAuth: [] 
      requestBody:
        description: Provide your details
        content:
          application/json:
            schema:
              type: object
            properties:
              badge:
                type: string
            example:
              badge: 1
      parameters:
        - in: path
          name: id
          required: true
          description: user id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: User details and token
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a users.
      description: Only logged in admin can use this endpoint to delete the provided users id.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: user id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: User details and token
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /donate:
    post:
      summary: create a donation.
      description: create a donation
      security:
        - bearerAuth: []
      requestBody:
        description: provide donation details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DonationResponse"
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: get all donation.
      description: get all donation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /donate/{id}:
    get:
      summary: get a single donation.
      description: get a single donation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: donation id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: update a single donation.
      description: update a single donation
      security:
        - bearerAuth: []
      requestBody:
        description: provide your details
        content:
          application/json:
            schema:
              type: object
            properties:
              pickupDate:
                type: string
                example: "2022-06-26"
              pickupAddress:
                type: string
                example: "akure ondo"
              contactName:
                type: string
                example: "YouTube"
              contactPhoneNumber:
                type: string
                example: "09020119024"
              localGovernment:
                type: string
                example: "olorunda"
      parameters:
        - in: path
          name: id
          required: true
          description: donation id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: delete a single donation.
      description: delete a single donation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: donation id 
          schema: 
            type: string
            example: "60ce2c43732fc72480f9a4e7"
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /donate/my-donations:
    get:
      summary: get the logged in user donation.
      description: Only donor and volunteer level of users that are logged in are allowed to use this endpoint
      security:
        - bearerAuth: []
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /donate/dispatch-rider:
    patch:
      summary: Attached a dispatch riders to a Donation.
      description: Only admin that are logged in are allowed to use this endpoint to attach a dispatch riders to a specific donation if it's delivery option is pickup
      parameters:
        - name: donationId
          in: query
          description: The donation id
          required: true
          type: string
        - name: riderId
          in: query
          description: The dispatch rider id
          required: true
          type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
  /donate/verify-picked-up:
    patch:
      summary: Change the status of a donation to picked-up
      description: Only admin and dispatch riders that are logged in are allowed to use this endpoint. The dispatch rider scan the qrcode of the donor opon getting to the donor location to verify them, before picking the donation.
      parameters:
        - name: donationId
          in: query
          description: The donation id
          required: true
          type: string
        - name: decodedData
          in: query
          description: The decoded qrcode data
          required: true
          type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: donation response
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/DonationResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": 
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
          
          
          
  # First the routes
  /:
    # Followed by the http method
    get:
      # Summary of this route
      summary: ping me.
      # Description of the routes
      description: ok
      # Parameters needed, in the case the parameters will be supply in form of query
      # Response
      responses:
        '200': # status code
          # response description
          description: Nothing
          # Content of this response
          content:
            # Returning in json format
            application/json:
              # Schema for this json format
              schema: 
                status:
                  type: string
                  example: "Hello ✋, everything is working fine"
        "400": # bad request status code
          $ref: '#/components/responses/BadRequest'
        "401": # bad request status code
          $ref: '#/components/responses/Unauthorized'
        "403": # Forbidden request status code
          $ref: '#/components/responses/Forbidden'
        "404": # not found request status code
          $ref: '#/components/responses/NotFound'
        "500": # Internal server error 
          $ref: '#/components/responses/InternalServerError'
        